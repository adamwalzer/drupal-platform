<?php

function cmwn_school_menu() {
  $page_path = drupal_get_path('module', 'cmwn_child_perms').'/pages/';
  $items = array();
  $items['whats-my-story/my-school'] = array(
    'title' => t("My School"),
    'description' => t(''),
    'page callback' => 'cmwn_school_view',
    'file path' => $page_path,
    'file' => 'cmwn_module_child_permissions.inc',
    'access arguments' => array("access content"),
  );
  return $items;
}

function cmwn_school_view() {
  global $user;
  if (ChildUser::canHydrate($user)) {
    $child = ChildUser::castAs($user);
    if ($school = $child->getSchools()) {
      $school = array_pop($school);
      return node_view($school, false, true);
    }
  }
  drupal_set_message(t('This page is for registered users only. !link.', array('!link' => l('Create your profile now', 'user/register'))));
  drupal_access_denied();
}

function cmwn_school_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($node->type) {
    case 'school':
      if ($op == 'view' && $a4) {
        $access = false;
        if (in_array('administrator', array_values($user->roles)) || $user->uid == $node->uid) {
          $access = true;
        }
        $child_role = get_role_from_rid(variable_get('cmwn_module_child_role', ''));
        $parent_role = get_role_from_rid(variable_get('cmwn_module_parent_role', ''));
        $teacher_role = get_role_from_rid(variable_get('cmwn_module_teacher_role', ''));
        switch ($user->user_type) {
          case $child_role:
            if ($school = ChildUser::castAs($user)->getSchool()) {
              if ($school->nid == $node->nid) {
                $access = true;
              }
            }
            break;
          case $parent_role:

            break;
          case $teacher_role:

            break;
        }
        if (!$access) {
          drupal_access_denied();
          exit;
        }
      }
      break;
  }
}

//returns true if they go to different schools. returns false if same school or both children not associated with any school.
function cmwn_school_different_schools($user1, $user2){
  
  $debug = false;
  
  //if($user2->uid == '5022'){
    //$debug = true;
  //}
  
  //return false;
  $school1 = false;
  $school_user1 = false;
  $user1_has_school = true;
  
  $school2 = false;
  $school_user2 = false;  
  $user2_has_school = true;
  
  switch($user1->user_type){
    case 'child':
      $school_user1 = ChildUser::castAs($user1);
      $school1 = array_pop($school_user1->getSchools());
      break;
    case 'teacher':
      $school_user1 = TeacherUser::castAs($user1);
      $school1 = array_pop($school_user1->getSchools());
      break;
    case 'parent':
      $school_user1 = ParentUser::castAs($user1);
      $school1 = $school_user1->getSchools();    
      break;
    default:
      $user1_has_school = false;

  }
  
  switch($user2->user_type){
    case 'child':
      $school_user2 = ChildUser::castAs($user2);
      $school2 = array_pop($school_user2->getSchools());
      break;
    case 'teacher':
      $school_user2 = TeacherUser::castAs($user2);
      $school2 = array_pop($school_user2->getSchools());    
      break;
    case 'parent':
      //return false;
      $school_user2 = ParentUser::castAs($user2);
      $school2 = $school_user2->getSchools();    
      
      //ok at this point we have two arrays of schools for parents....if there's any overlap, return true otherwise return false........
      if((count($school2) == 0 && count($school1) == 0) || (!is_array($school2) || !is_array($school1))){
        return false;//no schools, so return false, tehy can be friends
      }

      $dup = array_intersect(array_keys($school1), array_keys($school2));

      if(count($dup) > 0){
        return false;
      }
      
      break;
    default:
      $user2_has_school = false;      
  }

  if(($user1_has_school == $user2_has_school) && ($user1_has_school == false)){
    return false;//not different schools as they have no school
  }
  
  if(!$school1 && !$school2){
    return false;
  }
  
  if(($school1 && !$school2) || (!$school1 && $school2)){
    return true;
  }
  
  if($school1->nid == $school2->nid){
    return false;
  }
  
  return true;  
}


function cmwn_school_can_friend($user1,$user2){
  return (!cmwn_school_different_schools($user1, $user2) && ($user1->user_type == $user2->user_type));
}