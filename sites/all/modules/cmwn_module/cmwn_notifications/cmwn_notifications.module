<?php
  
function cmwn_notifications_init(){
  drupal_add_css(drupal_get_path('module', 'cmwn_notifications') .'/css/cmwn_notifications.css');
}  
  
/**
 * Display message overview list
 */
function cmwn_notifications_messaging_get($account,$subject,$sender = null) {
  $output = '';
  if($sender){
    $messages = messaging_store('get',array('sender'=>$sender,'subject' => $subject,'method' => 'simple', 'uid' => $account->uid), array('mqid DESC'), 100, 20, false);  
  }else{
    $messages = messaging_store('get',array('subject' => $subject,'method' => 'simple', 'uid' => $account->uid), array('mqid DESC'), 100, 20, false);  
  }
  
  if ($messages) {
    $header = array(t('Subject'), t('Date'), t(''));
    $rows = array();
    foreach ($messages as $message) {
      $message = (array)$message;
      $rows[] = array(
        '<h4>' . l($message['subject'], 'user/'. $account->uid .'/messages/view/'. $message['mqid'],array('query' => array('destination'=>$_GET['q']))) . '</h4>',
        //'<h4>' . $message['subject'] . '</h4>',
        //!empty($message['sender_account']) ? theme('username', $message['sender_account']) : t('System'),
        format_date($message['created'], 'custom', 'F j, Y, g:i a'),
        l(t('Review'), 'user/'. $account->uid .'/messages/view/'. $message['mqid'],array('attributes'=>array('class'=>'button'),'query' => array('destination'=>$_GET['q']))),
      );
    }    
    $output .= '<div class="notices-table">' . theme('table', $header, $rows) . '</div>';
    $output .= theme('pager', array(), MESSAGING_SIMPLE_PAGER);
  } else {
    $output .= '<p class="message-queue-empty">' . t('No pending messages') . '</p>';
  }
  return $output;
}  

  
function cmwn_notifications_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      //check if being deleted by an admin/moderator
      global $user;
      
      $moderator_roles = array('3', '11', '26');

      //$is_moderator = (in_array('administrator', array_values($user->roles)) || in_array('moderator', array_values($user->roles)) || in_array('senior_moderator', array_values($user->roles)));
//      print 'delete';
      if(($node->type == 'whiteboard' || $node->type == 'video') && $node->uid != $user->uid){
//        print 'delete mod';exit;
        //moderator deleting post not their own
        $post_user = user_load($node->uid);
        @$image =  $node->field_image[0]['filename'];
        @$body  = '"' . $node->body . '"';
        @$video =  $node->field_video[0]['filename'];
        
        $post_identifier = $video . ' ' . $image . ' ' . $body;
        cmwn_notifications_rejected_content($post_user, $post_identifier);
        //check if this child has a parent.
        $parent_uid = db_result(db_query('select requester_id from {user_relationships} where requestee_id = %d and approved = 1  and rtid =2', array($post_user->uid)));
        $parent_account = user_load($parent_uid);
        cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $post_user);
        
      }
      
      break;
  }
}  
  
//appears not to be used due to v2 profiles account.inc not invoking hook_user :(  
function cmwn_notifications_user($op, &$edit, &$account, $category = NULL) {
  switch($op){
    case 'update':
			if(trim($edit['pass']) != '' && $edit['pass'] != $account->pass){
  			cmwn_notifications_password_change();  			
			}
      break;
  }
}
function cmwn_notifications_rejected_content($account, $post_identifier){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Inappropriate Content'),
    'body' => 'Inappropriate Content<br /> you have submitted content that has been deemed inappropriate
for CMWN. Please resubmit your content ...
Your post (' . $post_identifier . ') was removed from CMWN.
We suggest following the outline below and your content will follow
guidlines for CMWN....',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, &$message, $method = NULL, $queue = 0);
}

function cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $child_account){
  //password has changed, push message.
  
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Inappropriate Content'),
    'body' => 'Inappropriate Content<br /> your child '.$child_account->name.' has submitted content that has been deemed inappropriate
for CMWN. 
The post (' . $post_identifier . ') was removed from CMWN.
We suggest reviewing the outline below with your child and their content will follow
guidlines for CMWN....',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($parent_account, &$message, $method = NULL, $queue = 0);
  $mqid = db_last_insert_id('messaging_store', 'mqid');
  //set sender to child's uid to keep track of which child this parent notice is for!
  db_query('update {messaging_store} set sender = %d where mqid = %d', array($child_account->uid, $mqid));
}

function cmwn_notifications_password_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Password Changed'),
    'body' => 'You have changed your password.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, &$message, $method = NULL, $queue = 0);
}

function cmwn_notifications_username_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Username Changed'),
    'body' => 'You have changed your username.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, &$message, $method = NULL, $queue = 0);
}

function cmwn_notifications_email_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Email Changed'),
    'body' => 'You have changed the email address associated with your account.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, &$message, $method = NULL, $queue = 0);
}


function cmwn_notifications_webform_submission_insert($node, $submission) {
  //determine if this is the final action item for this flip being inserted. If it is, push award message.
  //get flip nid from this action item nid
  $nid = db_result(db_query("SELECT nid FROM {content_field_actions} where field_actions_nid = %d", $node->nid));
  if($nid){
    $flip_node = node_load($nid);
    global $user;
    if($flip_node->field_actions[count($flip_node->field_actions)-1]['nid'] == $node->nid){//is this the last action item in this flip?
      cmwn_notifications_flip_award($user, $flip_node->nid, $flip_node->title);
      //send notice to parent
      $parent_uid = db_result(db_query('select requester_id from {user_relationships} where requestee_id = %d and approved = 1  and rtid =2', array($user->uid)));
      $parent_account = user_load($parent_uid);
      cmwn_notifications_flip_award_parent($parent_account, $flip_node->nid, $flip_node->title, $user);
    }

  }
}    
  
function cmwn_notifications_flip_award($account, $nid, $title){
 /*
 * @param $account
 *   User object to recieve message.
 * @param $message
 *   Array of message parts that will be compiled depending on send method.
 *   Mandatory message parts, which may have nexted parts are:
 *   - 'type'
 *   - 'subject'
 *   - 'body'. The message body may have 'header', 'content', 'footer', 'etc'
 * @param $method
 *   Optional send method. Defaults to the user account predefined method_exists
 */
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Flip Award'),
    'body' => 'You have earned a flip award for action item "' . $title . '."',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, &$message, $method = NULL, $queue = 0);
}

function cmwn_notifications_flip_award_parent($parent_account, $nid, $title, $child_account){
 /*
 * @param $account
 *   User object to recieve message.
 * @param $message
 *   Array of message parts that will be compiled depending on send method.
 *   Mandatory message parts, which may have nexted parts are:
 *   - 'type'
 *   - 'subject'
 *   - 'body'. The message body may have 'header', 'content', 'footer', 'etc'
 * @param $method
 *   Optional send method. Defaults to the user account predefined method_exists
 */
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Flip Award'),
    'body' => 'Your child '.$child_account->name.' has earned a flip award for action item "' . $title . '."',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($parent_account, &$message, $method = NULL, $queue = 0);
  $mqid = db_last_insert_id('messaging_store', 'mqid');
  //set sender to child's uid to keep track of which child this parent notice is for!
  db_query('update {messaging_store} set sender = %d where mqid = %d', array($child_account->uid, $mqid));  
}

  
