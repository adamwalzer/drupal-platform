<?php

  
function cmwn_notifications_init(){
  drupal_add_css(drupal_get_path('module', 'cmwn_notifications') .'/css/cmwn_notifications.css');
}  
  
function cmwn_notifications_menu() {
  $items = array();
  
  $items['node/%node/delete_format'] = array(
    'title' => 'Remove Due to Format', 
    'access arguments' => array('remove post for file format issues'),
    'page callback' => 'cmwn_notifications_delete_file_format',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,   
  ); 

  $items['node/%node/delete_bullying'] = array(
    'title' => 'Remove Due to Bullying', 
    'access arguments' => array('remove post for bullying'),
    'page callback' => 'cmwn_notifications_delete_bullying',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,   
  ); 

  $items['node/%node/delete_inappropriate'] = array(
    'title' => 'Remove Due to Inappropriate', 
    'access arguments' => array('remove post for inappropriate'),
    'page callback' => 'cmwn_notifications_delete_inappropriate',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,   
  ); 
   
  return $items;
}
  
function cmwn_notifications_perm() {
  return array('remove post for file format issues','remove post for bullying', 'remove post for inappropriate');
}  
  
/*Form for File Format*/
function cmwn_notifications_delete_file_format(){
  return drupal_get_form('cmwn_notifications_delete_file_format_form');
}  

function cmwn_notifications_delete_file_format_form(&$form_state){  
  $form['delete_confirm'] = array(
    '#value' => t('Are you sure you want to remove this content due to a file format issue? <br />The author will receive a notification that it was removed for this reason.<br /><br />'),
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=> 'Yes, remove this content due to a file format issue.',
  );
  
  return $form;
}
  
function cmwn_notifications_delete_file_format_form_submit($form, &$form_state){
  //note, hook_nodeapi delete fu in this module checks for delete_format to change message in case its format issue not inappropriate content issue.
  killfile_node_delete($form_state['values']['nid']);
  drupal_set_message(t('Content was removed due to file format error.'));
  drupal_goto('admin/content/node');
}

/*Form for Bullying*/
function cmwn_notifications_delete_bullying(){
  return drupal_get_form('cmwn_notifications_delete_bullying_form');
}  

function cmwn_notifications_delete_bullying_form(&$form_state){  
  $form['delete_confirm'] = array(
    '#value' => t('Are you sure you want to remove this content due to bullying? <br />The author will receive a notification that it was removed for this reason.<br /><br />'),
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=> 'Yes, remove this content due to bullying.',
  );
  
  return $form;
}
  
function cmwn_notifications_delete_bullying_form_submit($form, &$form_state){
  //note, hook_nodeapi delete fu in this module checks for delete_bullying arg in url to change message based on context
  killfile_node_delete($form_state['values']['nid']);
  drupal_set_message(t('Content was removed due to bullying.'));
  drupal_goto('admin/content/node');
}


/*Form for Inappropriate*/
function cmwn_notifications_delete_inappropriate(){
  return drupal_get_form('cmwn_notifications_delete_inappropriate_form');
}  

function cmwn_notifications_delete_inappropriate_form(&$form_state){  
  $form['delete_confirm'] = array(
    '#value' => t('Are you sure you want to remove this content due to being inappropriate? <br />The author will receive a notification that it was removed for this reason.<br /><br />'),
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=> 'Yes, remove this content due to inappropriate content.',
  );
  
  return $form;
}
  
function cmwn_notifications_delete_inappropriate_form_submit($form, &$form_state){
  //note, hook_nodeapi delete fu in this module checks for delete_bullying arg in url to change message based on context
  killfile_node_delete($form_state['values']['nid']);
  drupal_set_message(t('Content was removed due to inappropriate.'));
  drupal_goto('admin/content/node');
}



/**
 * Display message overview list
 */
function cmwn_notifications_messaging_get($account,$subject,$sender = null) {
  $output = '';
  if($sender){
    $messages = messaging_store('get',array('sender'=>$sender,'subject' => $subject,'method' => 'simple', 'uid' => $account->uid), array('mqid DESC'), 100, 20, false);  
  }else{
    $messages = messaging_store('get',array('subject' => $subject,'method' => 'simple', 'uid' => $account->uid), array('mqid DESC'), 100, 20, false);  
  }
  
  if ($messages) {
    $header = array(t('Subject'), t('Date'), t(''));
    $rows = array();
    foreach ($messages as $message) {
      $message = (array)$message;
      
      if($account->user_type == 'parent' && arg(2) == 'notices' && arg(3) == 'account' && strstr($message['body'], 'your child')){//a little hokey, don't want child notices in parent account window

      }else{
        $rows[] = array(
          '<h4>' . l($message['subject'], 'user/'. $account->uid .'/messages/view/'. $message['mqid'],array('query' => array('destination'=>$_GET['q']))) . '</h4>',
          //'<h4>' . $message['subject'] . '</h4>',
          //!empty($message['sender_account']) ? theme('username', $message['sender_account']) : t('System'),
          format_date($message['created'], 'custom', 'F j, Y, g:i a'),
          l(t('Review'), 'user/'. $account->uid .'/messages/view/'. $message['mqid'],array('attributes'=>array('class'=>'button'),'query' => array('destination'=>$_GET['q']))),
        );
      }

      
    }    
    $output .= '<div class="notices-table">' . theme('table', $header, $rows) . '</div>';
    $output .= theme('pager', array(), MESSAGING_SIMPLE_PAGER);
  } else {
    $output .= '<p class="message-queue-empty">' . t('No pending messages') . '</p>';
  }
  return $output;
}  

  
function cmwn_notifications_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      //check if being deleted by an admin/moderator
      global $user;
      
      $moderator_roles = array('3', '11', '26');

      //$is_moderator = (in_array('administrator', array_values($user->roles)) || in_array('moderator', array_values($user->roles)) || in_array('senior_moderator', array_values($user->roles)));
//      print 'delete';
      if(($node->type == 'whiteboard' || $node->type == 'video')){ //&& $node->uid != $user->uid){//this uid check does not respect node->field_user_reference on whiteboard nodes :(
        $post_user = ($node->type == 'whiteboard') ? user_load($node->field_user_reference[0]['uid']):user_load($node->uid);
        @$image =  $node->field_image[0]['filename'];
        @$body  = '"' . $node->body . '"';
        @$video =  $node->field_video[0]['filename'];
        $post_identifier = $video . ' ' . $image . ' ' . $body; 
        @$parent_uid = db_result(db_query('select requester_id from {user_relationships} where requestee_id = %d and approved = 1  and rtid =2', array($post_user->uid)));       
        $user_warnings = variable_get('cmwn_notifications_' . $poser_user->uid, array('bullying'=>0,'inappropriate'=>0));
        switch (true){
          case (arg(2) == 'delete_format'):
            //moderator deleting post due to format issue
            cmwn_notifications_rejected_content($post_user, $post_identifier, 'format');
            break;
          case (arg(2) == 'delete_bullying'):
            //moderator deleting post due to bullying
            $user_warnings['bullying']++;
            variable_set('cmwn_notifications_' . $post_user->uid, $user_warnings);            
            cmwn_notifications_rejected_content($post_user, $post_identifier, 'bullying');
            //check if this child has a parent.
            if($parent_uid){
              $parent_account = user_load($parent_uid);
              cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $post_user,'bullying');                        
            }

            break;
                    
          case (arg(2) == 'delete_inappropriate'):
            //moderator deleting post not their own, presume due to inappropriate content
            $user_warnings['inappropriate']++;
            variable_set('cmwn_notifications_' . $node->uid, $user_warnings);
            cmwn_notifications_rejected_content($post_user, $post_identifier,'inappropriate');
            //check if this child has a parent.
            if($parent_uid){
              $parent_account = user_load($parent_uid);
              cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $post_user,'inappropriate');                        
            }
          
            break;
        }
        
      }
      
      break;
  }
}  

function cmwn_notifications_comment(&$a1, $op) {
  switch($op){
    case 'delete':
      $node = node_load($a1->nid);
      if(($node->type == 'whiteboard' || $node->type == 'video')){
        module_load_include('inc', 'comment', 'comment.admin');
        $post_user = user_load($a1->uid);
        @$body  = '"' . $a1->comment . '"';
        $post_identifier = $body; 
        @$parent_uid = db_result(db_query('select requester_id from {user_relationships} where requestee_id = %d and approved = 1  and rtid =2', array($post_user->uid)));       
        $user_warnings = variable_get('cmwn_notifications_' . $poser_user->uid, array('bullying' => 0,'inappropriate' => 0));
        switch (true){
          case (arg(3) == 'delete_format'):
            //moderator deleting post due to format issue
            cmwn_notifications_rejected_content($post_user, $post_identifier, 'format');
            break;
          case (arg(3) == 'delete_bullying'):
            //moderator deleting post due to bullying
            $user_warnings['bullying']++;
            variable_set('cmwn_notifications_' . $post_user->uid, $user_warnings);            
            cmwn_notifications_rejected_content($post_user, $post_identifier, 'bullying');
            //check if this child has a parent.
            if($parent_uid){
              $parent_account = user_load($parent_uid);
              cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $post_user,'bullying');                        
            }
      
            break;
                    
          case (arg(3) == 'delete_inappropriate'):
            //moderator deleting post not their own, presume due to inappropriate content
            $user_warnings['inappropriate']++;
            variable_set('cmwn_notifications_' . $post_user->uid, $user_warnings);
            cmwn_notifications_rejected_content($post_user, $post_identifier,'inappropriate');
            //check if this child has a parent.
            if($parent_uid){
              $parent_account = user_load($parent_uid);
              cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $post_user,'inappropriate');                        
            }
            break;
        }
      }      
      break;
  }
}
  
//appears not to be used due to v2 profiles account.inc not invoking hook_user :(  
function cmwn_notifications_user($op, &$edit, &$account, $category = NULL) {
  switch($op){
    case 'update':
			if(trim($edit['pass']) != '' && $edit['pass'] != $account->pass){
  			cmwn_notifications_password_change();  			
			}
      break;
  }
}

function cmwn_notifications_rejected_content($account, $post_identifier, $reason = 'inappropriate'){
  //password has changed, push message.
  $user_warnings = variable_get('cmwn_notifications_' . $account->uid, array('bullying' => 0,'inappropriate' => 0));

  switch($reason){
    case 'format':
      $message = array(
          'type' => 'profile-message',
          'subject' => t('File Error'),
          'body' => 'Unacceptable File Upload Format<br /> you have submitted a file of the wrong format.      Your post (' . $post_identifier . ') was removed from CMWN.
      We suggest following the outline below and your content will follow guidelines for CMWN....',
          'language' => user_preferred_language($account),
        );
      break;
    case 'bullying':
      $message = array(
          'type' => 'profile-message',
          'subject' => t('Bullying Warning'),
          'body' => 'Unacceptable Bullying Behavior<br /> Your post (' . $post_identifier . ') was removed from CMWN due to bullying.
          This was your ' . cmwn_notifications_ordinal($user_warnings['bullying']) . ' warning for bullying.
      We suggest following the outline below and your content will follow guidelines for CMWN....',
          'language' => user_preferred_language($account),
        );
      break;
        
    default:
      $message = array(
        'type' => 'profile-message',
        'subject' => t('Inappropriate Content'),
        'body' => 'Inappropriate Content<br /> you have submitted content that has been deemed inappropriate
    for CMWN. Please resubmit your content ...
    Your post (' . $post_identifier . ') was removed from CMWN.
    This was your ' . cmwn_notifications_ordinal($user_warnings['inappropriate']) . ' warning for inappropriate content.    
    We suggest following the outline below and your content will follow guidelines for CMWN....',
        'language' => user_preferred_language($account),
      );
      break;
    
  }
  messaging_message_send_user($account, $message, $method = NULL, $queue = 0);
}

function cmwn_notifications_rejected_content_parent($parent_account, $post_identifier, $child_account, $reason = 'inappropriate'){
  //password has changed, push message.
  $user_warnings = variable_get('cmwn_notifications_' . $child_account->uid, array('bullying' => 0,'inappropriate' => 0));  
  switch($reason){
      case 'format':
        $message = array(
          'type' => 'profile-message',
          'subject' => t('File Error'),
          'body' => 'Unacceptable File Format Error<br /> your child '.$child_account->name.' has submitted content that has was of the wrong file format. 
      The post (' . $post_identifier . ') was removed from CMWN.
      We suggest reviewing the outline below with your child and their content will follow guidelines for CMWN....',
          'language' => user_preferred_language($account),
        );         
        break;
      case 'bullying':
        $message = array(
          'type' => 'profile-message',
          'subject' => t('Bullying Warning'),
          'body' => 'Bullying Warning<br /> your child '.$child_account->name.' has submitted content that has been deemed inappropriate 
      for CMWN due to bullying.
      The post (' . $post_identifier . ') was removed from CMWN.
      This was your child\'s ' . cmwn_notifications_ordinal($user_warnings['bullying']) . ' warning for bullying.    
      We suggest reviewing the outline below with your child and their content will follow guidelines for CMWN....',
          'language' => user_preferred_language($account),
        );        
        break;
      default:
        $message = array(
          'type' => 'profile-message',
          'subject' => t('Inappropriate Content'),
          'body' => 'Inappropriate Content<br /> your child ' . $child_account->name . ' has submitted content that has been deemed inappropriate
      for CMWN. 
      The post (' . $post_identifier . ') was removed from CMWN.
      This was your child\'s ' . cmwn_notifications_ordinal($user_warnings['inappropriate']) . ' warning for bullying.          
      We suggest reviewing the outline below with your child and their content will follow guidelines for CMWN....',
          'language' => user_preferred_language($account),
        );      
        break;
  }
      

  messaging_message_send_user($parent_account, $message, $method = NULL, $queue = 0);
  $mqid = db_last_insert_id('messaging_store', 'mqid');
  //set sender to child's uid to keep track of which child this parent notice is for!
  db_query('update {messaging_store} set sender = %d where mqid = %d', array($child_account->uid, $mqid));
}

function cmwn_notifications_password_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Password Changed'),
    'body' => 'You have changed your password.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, $message, $method = NULL, $queue = 0);
}

function cmwn_notifications_username_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Username Changed'),
    'body' => 'You have changed your username.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, $message, $method = NULL, $queue = 0);
}

function cmwn_notifications_email_change($account){
  //password has changed, push message.
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Email Changed'),
    'body' => 'You have changed the email address associated with your account.',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($account, $message, $method = NULL, $queue = 0);
}


function cmwn_notifications_webform_submission_insert($node, $submission) {
  //determine if this is the final action item for this flip being inserted. If it is, push award message.
  //get flip nid from this action item nid
  $nid = db_result(db_query("SELECT nid FROM {content_field_actions} where field_actions_nid = %d", $node->nid));
  watchdog('webform_notification_nid', $nid);
  if($nid){
    $flip_node = node_load($nid);
    $action_user = user_load($submission->uid);
    watchdog('flip_node',print_r($flip_node,true));
    watchdog('action_node',print_r($node,true));
    if($flip_node->field_actions[count($flip_node->field_actions)-1]['nid'] == $node->nid){//is this the last action item in this flip?
      cmwn_notifications_flip_award($action_user, $flip_node->nid, $flip_node->title);
      //send notice to parent
      $parent_uid = db_result(db_query('select requester_id from {user_relationships} where requestee_id = %d and approved = 1  and rtid =2', array($action_user->uid)));
      $parent_account = user_load($parent_uid);
      cmwn_notifications_flip_award_parent($parent_account, $flip_node->nid, $flip_node->title, $action_user);
    }

  }
}    
  
function cmwn_notifications_flip_award($account, $nid, $title){
 /*
 * @param $account
 *   User object to recieve message.
 * @param $message
 *   Array of message parts that will be compiled depending on send method.
 *   Mandatory message parts, which may have nexted parts are:
 *   - 'type'
 *   - 'subject'
 *   - 'body'. The message body may have 'header', 'content', 'footer', 'etc'
 * @param $method
 *   Optional send method. Defaults to the user account predefined method_exists
 */
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Flip Award'),
    'body' => 'You have earned a flip award for action item "' . $title . '."',
    'language' => user_preferred_language($account),
  );
  watchdog('cmwn_notice_flip_award',print_r($message, true));
  messaging_message_send_user($account, $message, $method = NULL, $queue = 0);
}

function cmwn_notifications_flip_award_parent($parent_account, $nid, $title, $child_account){
 /*
 * @param $account
 *   User object to recieve message.
 * @param $message
 *   Array of message parts that will be compiled depending on send method.
 *   Mandatory message parts, which may have nexted parts are:
 *   - 'type'
 *   - 'subject'
 *   - 'body'. The message body may have 'header', 'content', 'footer', 'etc'
 * @param $method
 *   Optional send method. Defaults to the user account predefined method_exists
 */
  $message = array(
    'type' => 'profile-message',
    'subject' => t('Flip Award'),
    'body' => 'Your child '.$child_account->name.' has earned a flip award for action item "' . $title . '."',
    'language' => user_preferred_language($account),
  );
  messaging_message_send_user($parent_account, $message, $method = NULL, $queue = 0);
  $mqid = db_last_insert_id('messaging_store', 'mqid');
  //set sender to child's uid to keep track of which child this parent notice is for!
  db_query('update {messaging_store} set sender = %d where mqid = %d', array($child_account->uid, $mqid));  
}

  


function cmwn_notifications_ordinal($num) {
  if (!in_array(($num % 100),array(11,12,13))){
    switch ($num % 10) {
      // Handle 1st, 2nd, 3rd
      case 1:  return $num.'st';
      case 2:  return $num.'nd';
      case 3:  return $num.'rd';
    }
  }
  return $num.'th';
} 

function cmwn_notificiations_get_all($uid, $subect = array()){

  if(count($subject) > 0){
    return messaging_store('get',array('subject' => $subject, 'method' => 'simple', 'uid' => $uid), array('mqid DESC'), 100, 20, false);    
  }else{
    return messaging_store('get',array('method' => 'simple', 'uid' => $uid), array('mqid DESC'), 100, 20, false);    
  }
  
}

function cmwn_notifications_posting_notices_subjects(){
  return array('Inappropriate Content', 'File Error', 'Bullying Warning');//, 'Services Notification');  
}

function cmwn_notifications_award_notices_subjects(){
  return array('Inappropriate Content', 'File Error', 'Bullying Warning', 'Services Notification');  
}

function cmwn_notifications_action_notices_subjects(){
  return array('Inappropriate Content', 'File Error', 'Bullying Warning', 'Services Notification');  
}

function cmwn_notifications_account_notices_subjects(){
  return array('Inappropriate Content', 'File Error', 'Bullying Warning', 'Services Notification');  
}

